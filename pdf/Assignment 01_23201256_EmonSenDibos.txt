//TASK 1
import java.util.Scanner;

public class TASK1 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int sum = 0;
        int count = 0;
        int minimum = Integer.MAX_VALUE;
        int maximum = Integer.MIN_VALUE;
        for (int i = 0; i < 10; i++) {
            int n = scanner.nextInt();
            if (n > 0 && n % 2 != 0) {
                sum += n;
                count++;
                if (n < minimum) {
                    minimum = n;
                }
                if (n > maximum) {
                    maximum = n;
                }
            }
        }
        if (count == 0) {
            System.out.println("No odd positive numbers found");
        } else {
            double average = sum / (double)count;
            System.out.println("Sum=" + sum);

            System.out.println("Minimum=" + minimum);
            System.out.println("Maximum=" + maximum);
            System.out.println("Average=" + average);
        }
    }
}
//task2

//task2
import java.util.Scanner;

public class task2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int first = scanner.nextInt();
        int last = scanner.nextInt();
        if (first > last) {
            int temp = first;
            first = last;
            last = temp;
        }
        boolean flag;
        int count = 0;

        for (int i = first + 1; i < last; i++) {
            flag = false;
            for (int j = 2; j <= i-1 ; j++) {
                if (i % j == 0) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                count++;
            }
        }
        System.out.println("There are " + count + " prime numbers between " + first + " and " + last + ".");
    }
}
//TASK3
import java.util.Scanner;

public class Task3 {
    public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    String first = scanner.next();
        //String last = scanner.nextLine();
    String last = scanner.next();

    String constr = first + " " + last;

    int sum = 0;
    for (int i = 0; i < constr.length(); i++) {
        char c = constr.charAt(i);
        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ) {
            sum += c;
        }
    }
    System.out.println(constr);
    System.out.println(sum);

}
}
//task4

import java.util.Scanner;

public class Task4 {public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
        String s1 = scanner.nextLine();
        String s2="";

        for (int i = 0; i < s1.length(); i++) {
            char char1 = s1.charAt(i);
            if (char1=='a'){s2+='z';continue;}
            if (char1 >= 'a' && char1 <= 'z') {
                char char2 = (char) (char1-1);
                s2+=char2;
            }
            }
    System.out.println(s2);
        }


    }

//task5
import java.util.Scanner;

public class Task5 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the length of the array: ");
        int len = scanner.nextInt();
        int[] arr = new int[len];
        for (int i = 0; i < len; i++) {
            arr[i] = scanner.nextInt();
        }
        int start = 0;
        int end = len - 1;
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
        for (int i = 0; i < len; i++) {
            System.out.print(arr[i] + " ");
        }
    }
}
//task6
//1)tc-O(N*N)+O(N)
/*2)output 
-5 - 1 times
10 - 3 times
14 - 1 times
-7 - 1 times
not sorted
3)changing orginal array
*/
import java.util.Scanner;

public class Task6 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("N=");
        int N = scanner.nextInt();

        int[] arr = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < N; i++) {
            int elementcount = 1;
            if (arr[i] != Integer.MAX_VALUE) {
                for (int j = i+1; j < N; j++) {
                    if (arr[i] == arr[j]) {
                        elementcount++;
                        arr[j] = Integer.MAX_VALUE;
                    }
                }
                System.out.println(arr[i] + " - " + elementcount + " times");
            }
        }
    }
}
/*
//1)tc-O(N)+O(2maxi)+O(2maxi)
/*2)output 
-7 - 1 times
-5 - 1 times
10 - 3 times
14 - 1 times
sorted as we use hashmap type
3)not changing orginal array
*/
import java.util.Scanner;

public class task62 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("N=");
        int N = scanner.nextInt();
        int[] arr = new int[N];
        int maxi = Integer.MIN_VALUE;
        for (int i = 0; i < N; i++) {
            arr[i] = scanner.nextInt();
            if (arr[i] > maxi) {
                maxi = arr[i];
            }
        }
        int[] hashing = new int[2 * maxi + 1];
        for (int i = 0; i < N; i++) {
            int index = arr[i] + maxi;
            hashing[index]++;
        }
        for (int k = -maxi; k <= maxi; k++) {
            int index = k + maxi;
            if (hashing[index] > 0) {
                System.out.println(k + " - " + hashing[index] + " times");
            }
        }
    }
*/
//task7
import java.util.Scanner;

public class task7 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("N=");
        int N = scanner.nextInt();
        double[] arr = new double[N];
        System.out.println("Please enter the elements of the array:");
        for (int i = 0; i < N; i++) {
            arr[i] = scanner.nextDouble();
        }
        double[] newarray = new double[N];
        int index = 0;
        int count = 0;
        for (int i = 0; i < N; i++) {
            if (i==0||(arr[i] != arr[i - 1])) {
                newarray[index] = arr[i];
                index++;
            } else {
                count++;
            }
        }
        System.out.print("New Array: ");
        for (int i = 0; i < index; i++) {
            System.out.print(newarray[i] + " ");
        }
        System.out.println();
        System.out.println("Removed elements: " + count);
    }
}
//task8
import java.util.Scanner;

public class task8 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("row=");
        int r = scanner.nextInt();

        System.out.print("column=");
        int c = scanner.nextInt();
        int[][] arr2 = new int[r][c];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                arr2[i][j] = scanner.nextInt();
            }
        }
        System.out.println("2D Array:");
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                System.out.print(arr2[i][j] + " ");
            }
            System.out.println();
        }
	System.out.println();

        int[] arr1 = new int[r * c];
        int i1 = 0;
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                arr1[i1++] = arr2[i][j];
            }
        }
        System.out.println("1D Array:");
        for (int i = 0; i < arr1.length; i++) {
            System.out.print(arr1[i] + " ");
        }
    }
}
//task9
public class Task9 {
    public static void main(String[] args) {
        int [ ] [ ] A = {{1, 0, 0},
                {0, 1, 0},
                {0, 0, 1}};

        int N = A.length;
        boolean flag = true;

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (i != j) {
                    if (A[i][j] != 0) {
                        flag = false;
                        break;
                    }
                } else {
                    if (A[i][j] != 1) {
                        flag = false;
                        break;
                    }
                }
            }

        }

        if (flag==true) {
            System.out.println("Identity Matrix");
        } else {
            System.out.println("Not an Identity Matrix");
        }
    }
}
//take matrix from user...
//at first,accidentally did it
/*import java.util.Scanner;

public class Task92 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        boolean flag = true;
        int[][] mat = new int[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                mat[i][j] = scanner.nextInt();
            }
        }
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (i != j) {
                    if (mat[i][j] != 0) {
                        flag = false;
                        break;
                    }
                } else {
                    if (mat[i][j] != 1) {
                        flag = false;
                        break;
                    }
                }
            }
        }
        if (flag==true) {
            System.out.println("Identity Matrix");
        } else {
            System.out.println("Not an Identity Matrix");
        }
    }
}
*/

//task10
import java.util.Scanner;
public class TreasureHunt {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[][] arr2D = {{0, 0, 10, 0, -1},
                {0, -1, 0, 0, -1},
                {-1, 0, -1, 0, 0},
                {0, -1, 7, 0, -1},
                {0, -1, 0, -1, 0}
        };
        System.out.println("Initial Map:");
        printMap(arr2D);
        int row = arr2D.length;
        int col = arr2D[0].length;
        int row_pos = -1, col_pos = -1;
        //To-do: find out the position of the player
        boolean posi = false;
        for (int i = 0; i < row && !posi; i++) {
            for (int j = 0; j < col; j++) {
                if (arr2D[i][j] == 7) {
                    row_pos = i;
                    col_pos = j;
                    posi = true;
                    break;
                }
            }
        }

        int turns = 5;
        while (turns > 0) {
            int new_row = row_pos, new_col = col_pos;
            System.out.printf("Enter move %d: ", (6 - turns));
            String inp = sc.nextLine();
            /*To-do: Based on the input update the player position and check if
             * 1. the player fell out of the grid
             * 2. player stepped on mine
             * 3. player found the treasure
             * otheriwse, update the player position */
            if (inp.equals("UP")) {
                new_row--;
            } else if (inp.equals("DOWN")) {
                new_row++;
            } else if (inp.equals("LEFT")) {
                new_col--;
            } else if (inp.equals("RIGHT")) {
                new_col++;

            }

            if (new_row < 0 || new_row >= row || new_col < 0 || new_col >= col) {
                System.out.println("Player fell outside the playing area. Game over!");
                break;
            }

            if (arr2D[new_row][new_col] == -1) {
                System.out.println("Player stepped on mine. Game Over!");
                break;
            }

            if (arr2D[new_row][new_col] == 10) {
                System.out.println("Treasure found. You win!");
                arr2D[row_pos][col_pos] = 0;
                row_pos = new_row;
                col_pos = new_col;
                arr2D[row_pos][col_pos] = 7;
                System.out.println("Final state:");
                printMap(arr2D);
                break;
            }

            arr2D[row_pos][col_pos] = 0;
            row_pos = new_row;
            col_pos = new_col;
            arr2D[row_pos][col_pos] = 7;
            System.out.println("Current state:");
            printMap(arr2D);
            turns--;
        }
        if (turns == 0) {
            System.out.println("Failed to find the treasure.");
        }
    }

    public static void printMap(int[][] arr) {
        // To-do: print the 2D grid
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                System.out.print(arr[i][j] + "      ");
            }
            System.out.println();
        }
    }
}
